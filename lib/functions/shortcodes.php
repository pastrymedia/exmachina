<?php
/**
 * ExMachina Framework.
 *
 * WARNING: This file is part of the core ExMachina Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package ExMachina\Shortcodes
 * @author  Machina Themes
 * @license GPL-2.0+
 * @link    http://www.machinathemes.com/
 */

// Search Shortcode
add_shortcode( '404_search', 'exmachina_404_search_shortcode' );
/**
   * Search Shortcode
   *
   * @since 0.5.0
   */
  function exmachina_404_search_shortcode() {
    return '<div class="exmachina-404-search">' . get_search_form( false ) . '</div>';
  }

/* ===POST SHORTCODES=== */

add_shortcode( 'post_date', 'exmachina_post_date_shortcode' );
/**
 * Produces the date of post publication.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string),
 *   format (date format, default is value in date_format option field),
 *   label (text following 'before' output, but before date).
 *
 * Output passes through 'exmachina_post_date_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_post_date_shortcode( $atts ) {

  $defaults = array(
    'after'  => '',
    'before' => '',
    'format' => get_option( 'date_format' ),
    'label'  => '',
  );

  $atts = shortcode_atts( $defaults, $atts, 'post_date' );

  $display = ( 'relative' === $atts['format'] ) ? exmachina_human_time_diff( get_the_time( 'U' ), current_time( 'timestamp' ) ) . ' ' . __( 'ago', 'exmachina' ) : get_the_time( $atts['format'] );

  if ( exmachina_html5() )
    $output = sprintf( '<time %s>', exmachina_attr( 'entry-time' ) ) . $atts['before'] . $atts['label'] . $display . $atts['after'] . '</time>';
  else
    $output = sprintf( '<span class="date published time" title="%5$s">%1$s%3$s%4$s%2$s</span> ', $atts['before'], $atts['after'], $atts['label'], $display, get_the_time( 'c' ) );

  return apply_filters( 'exmachina_post_date_shortcode', $output, $atts );

}

add_shortcode( 'post_time', 'exmachina_post_time_shortcode' );
/**
 * Produces the time of post publication.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string),
 *   format (date format, default is value in date_format option field),
 *   label (text following 'before' output, but before date).
 *
 * Output passes through 'exmachina_post_time_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_post_time_shortcode( $atts ) {

  $defaults = array(
    'after'  => '',
    'before' => '',
    'format' => get_option( 'time_format' ),
    'label'  => '',
  );

  $atts = shortcode_atts( $defaults, $atts, 'post_time' );

  if ( exmachina_html5() )
    $output = sprintf( '<time %s>', exmachina_attr( 'entry-time' ) ) . $atts['before'] . $atts['label'] . get_the_time( $atts['format'] ) . $atts['after'] . '</time>';
  else
    $output = sprintf( '<span class="date published time" title="%5$s">%1$s%3$s%4$s%2$s</span> ', $atts['before'], $atts['after'], $atts['label'], get_the_time( $atts['format'] ), get_the_time( 'c' ) );

  return apply_filters( 'exmachina_post_time_shortcode', $output, $atts );

}

add_shortcode( 'post_author', 'exmachina_post_author_shortcode' );
/**
 * Produces the author of the post (unlinked display name).
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string).
 *
 * Output passes through 'exmachina_post_author_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_post_author_shortcode( $atts ) {

  $defaults = array(
    'after'  => '',
    'before' => '',
  );

  $atts = shortcode_atts( $defaults, $atts, 'post_author' );

  $author = get_the_author();

  if ( exmachina_html5() ) {
    $output  = sprintf( '<span %s>', exmachina_attr( 'entry-author' ) );
    $output .= $atts['before'];
    $output .= sprintf( '<span %s>', exmachina_attr( 'entry-author-name' ) ) . esc_html( $author ) . '</span>';
    $output .= $atts['after'];
    $output .= '</span>';
  } else {
    $output = sprintf( '<span class="author vcard">%2$s<span class="fn">%1$s</span>%3$s</span>', esc_html( $author ), $atts['before'], $atts['after'] );
  }

  return apply_filters( 'exmachina_post_author_shortcode', $output, $atts );

}

add_shortcode( 'post_author_link', 'exmachina_post_author_link_shortcode' );
/**
 * Produces the author of the post (link to author URL).
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string).
 *
 * Output passes through 'exmachina_post_author_link_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_post_author_link_shortcode( $atts ) {

  $defaults = array(
    'after'    => '',
    'before'   => '',
  );

  $atts = shortcode_atts( $defaults, $atts, 'post_author_link' );

  $url = get_the_author_meta( 'url' );

  //* If no url, use post author shortcode function.
  if ( ! $url )
    return exmachina_post_author_shortcode( $atts );

  $author = get_the_author();

  if ( exmachina_html5() ) {
    $output  = sprintf( '<span %s>', exmachina_attr( 'entry-author' ) );
    $output .= $atts['before'];
    $output .= sprintf( '<a href="%s" %s>', $url, exmachina_attr( 'entry-author-link' ) );
    $output .= sprintf( '<span %s>', exmachina_attr( 'entry-author-name' ) );
    $output .= esc_html( $author );
    $output .= '</span></a>' . $atts['after'] . '</span>';
  } else {
    $link = '<a href="' . esc_url( $url ) . '" title="' . esc_attr( sprintf( __( 'Visit %s&#x02019;s website', 'exmachina' ), $author ) ) . '" rel="author external">' . esc_html( $author ) . '</a>';
    $output = sprintf( '<span class="author vcard">%2$s<span class="fn">%1$s</span>%3$s</span>', $link, $atts['before'], $atts['after'] );
  }

  return apply_filters( 'exmachina_post_author_link_shortcode', $output, $atts );

}

add_shortcode( 'post_author_posts_link', 'exmachina_post_author_posts_link_shortcode' );
/**
 * Produces the author of the post (link to author archive).
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string).
 *
 * Output passes through 'exmachina_post_author_posts_link_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_post_author_posts_link_shortcode( $atts ) {

  $defaults = array(
    'after'  => '',
    'before' => '',
  );

  $atts = shortcode_atts( $defaults, $atts, 'post_author_posts_link' );

  $author = get_the_author();
  $url    = get_author_posts_url( get_the_author_meta( 'ID' ) );

  if ( exmachina_html5() ) {
    $output  = sprintf( '<span %s>', exmachina_attr( 'entry-author' ) );
    $output .= $atts['before'];
    $output .= sprintf( '<a href="%s" %s>', $url, exmachina_attr( 'entry-author-link' ) );
    $output .= sprintf( '<span %s>', exmachina_attr( 'entry-author-name' ) );
    $output .= esc_html( $author );
    $output .= '</span></a>' . $atts['after'] . '</span>';
  } else {
    $link   = sprintf( '<a href="%s" title="%s" rel="author">%s</a>', esc_url( $url ), esc_attr( $author ), esc_html( $author ) );
    $output = sprintf( '<span class="author vcard">%2$s<span class="fn">%1$s</span>%3$s</span>', $link, $atts['before'], $atts['after'] );
  }

  return apply_filters( 'exmachina_post_author_posts_link_shortcode', $output, $atts );

}

add_shortcode( 'post_comments', 'exmachina_post_comments_shortcode' );
/**
 * Produces the link to the current post comments.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string),
 *   hide_if_off (hide link if comments are off, default is 'enabled' (true)),
 *   more (text when there is more than 1 comment, use % character as placeholder
 *     for actual number, default is '% Comments')
 *   one (text when there is exactly one comment, default is '1 Comment'),
 *   zero (text when there are no comments, default is 'Leave a Comment').
 *
 * Output passes through 'exmachina_post_comments_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_post_comments_shortcode( $atts ) {

  $defaults = array(
    'after'       => '',
    'before'      => '',
    'hide_if_off' => 'enabled',
    'more'        => __( '% Comments', 'exmachina' ),
    'one'         => __( '1 Comment', 'exmachina' ),
    'zero'        => __( 'Leave a Comment', 'exmachina' ),
  );
  $atts = shortcode_atts( $defaults, $atts, 'post_comments' );

  if ( ( ! exmachina_get_option( 'comments_posts' ) || ! comments_open() ) && 'enabled' === $atts['hide_if_off'] )
    return;

  // Darn you, WordPress!
  ob_start();
  comments_number( $atts['zero'], $atts['one'], $atts['more'] );
  $comments = ob_get_clean();

  $comments = sprintf( '<a href="%s">%s</a>', get_comments_link(), $comments );

  $output = exmachina_markup( array(
    'html5' => '<span class="entry-comments-link">' . $atts['before'] . $comments . $atts['after'] . '</span>',
    'xhtml' => '<span class="post-comments">' . $atts['before'] . $comments . $atts['after'] . '</span>',
    'echo'  => false,
  ) );

  return apply_filters( 'exmachina_post_comments_shortcode', $output, $atts );

}

add_shortcode( 'post_tags', 'exmachina_post_tags_shortcode' );
/**
 * Produces the tag links list.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is 'Tagged With: '),
 *   sep (separator string between tags, default is ', ').
 *
 * Output passes through 'exmachina_post_tags_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_post_tags_shortcode( $atts ) {

  $defaults = array(
    'after'  => '',
    'before' => __( 'Tagged With: ', 'exmachina' ),
    'sep'    => ', ',
  );
  $atts = shortcode_atts( $defaults, $atts, 'post_tags' );

  $tags = get_the_tag_list( $atts['before'], trim( $atts['sep'] ) . ' ', $atts['after'] );

  //* Do nothing if no tags
  if ( ! $tags )
    return;

  if ( exmachina_html5() )
    $output = sprintf( '<span %s>', exmachina_attr( 'entry-tags' ) ) . $tags . '</span>';
  else
    $output = '<span class="tags">' . $tags . '</span>';

  return apply_filters( 'exmachina_post_tags_shortcode', $output, $atts );

}

add_shortcode( 'post_categories', 'exmachina_post_categories_shortcode' );
/**
 * Produces the category links list.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is 'Tagged With: '),
 *   sep (separator string between tags, default is ', ').
 *
 * Output passes through 'exmachina_post_categories_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_post_categories_shortcode( $atts ) {

  $defaults = array(
    'sep'    => ', ',
    'before' => __( 'Filed Under: ', 'exmachina' ),
    'after'  => '',
  );

  $atts = shortcode_atts( $defaults, $atts, 'post_categories' );

  $cats = get_the_category_list( trim( $atts['sep'] ) . ' ' );

  if ( exmachina_html5() )
    $output = sprintf( '<span %s>', exmachina_attr( 'entry-categories' ) ) . $atts['before'] . $cats . $atts['after'] . '</span>';
  else
    $output = '<span class="categories">' . $atts['before'] . $cats . $atts['after'] . '</span>';

  return apply_filters( 'exmachina_post_categories_shortcode', $output, $atts );

}

add_shortcode( 'post_terms', 'exmachina_post_terms_shortcode' );
/**
 * Produces the linked post taxonomy terms list.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is 'Tagged With: '),
 *   sep (separator string between tags, default is ', '),
 *    taxonomy (name of the taxonomy, default is 'category').
 *
 * Output passes through 'exmachina_post_terms_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @global stdClass $post Post object
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string|boolean Shortcode output or false on failure to retrieve terms
 */
function exmachina_post_terms_shortcode( $atts ) {

  global $post;

  $defaults = array(
      'after'    => '',
      'before'   => __( 'Filed Under: ', 'exmachina' ),
      'sep'      => ', ',
      'taxonomy' => 'category',
  );

  $atts = shortcode_atts( $defaults, $atts, 'post_terms' );

  $terms = get_the_term_list( $post->ID, $atts['taxonomy'], $atts['before'], trim( $atts['sep'] ) . ' ', $atts['after'] );

  if ( is_wp_error( $terms ) )
      return;

  if ( empty( $terms ) )
      return;

  if ( exmachina_html5() )
    $output = sprintf( '<span %s>', exmachina_attr( 'entry-terms' ) ) . $terms . '</span>';
  else
    $output = '<span class="terms">' . $terms . '</span>';

  return apply_filters( 'exmachina_post_terms_shortcode', $output, $terms, $atts );

}

add_shortcode( 'post_edit', 'exmachina_post_edit_shortcode' );
/**
 * Produces the edit post link for logged in users.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is 'Tagged With: '),
 *   link (link text, default is '(Edit)').
 *
 * Output passes through 'exmachina_post_edit_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_post_edit_shortcode( $atts ) {

  if ( ! apply_filters( 'exmachina_edit_post_link', true ) )
    return;

  $defaults = array(
    'after'  => '',
    'before' => '',
    'link'   => __( '(Edit)', 'exmachina' ),
  );

  $atts = shortcode_atts( $defaults, $atts, 'post_edit' );

  //* Darn you, WordPress!
  ob_start();
  edit_post_link( $atts['link'], $atts['before'], $atts['after'] );
  $edit = ob_get_clean();

  $output = $edit;

  return apply_filters( 'exmachina_post_edit_shortcode', $output, $atts );

}

/* === FOOTER SHORTCODES === */

add_shortcode( 'footer_backtotop', 'exmachina_footer_backtotop_shortcode' );
/**
 * Produces the "Return to Top" link.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string),
 *   href (link url, default is fragment identifier '#wrap'),
 *   nofollow (boolean for whether to make the link include the rel="nofollow"
 *     attribute. Default is true),
 *   text (Link text, default is 'Return to top of page').
 *
 * Output passes through 'exmachina_footer_backtotop_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_footer_backtotop_shortcode( $atts ) {

  $defaults = array(
    'after'    => '',
    'before'   => '',
    'href'     => '#wrap',
    'nofollow' => true,
    'text'     => __( 'Return to top of page', 'exmachina' ),
  );
  $atts = shortcode_atts( $defaults, $atts, 'footer_backtotop' );

  $nofollow = $atts['nofollow'] ? 'rel="nofollow"' : '';

  $output = sprintf( '%s<a href="%s" %s>%s</a>%s', $atts['before'], esc_url( $atts['href'] ), $nofollow, $atts['text'], $atts['after'] );

  return apply_filters( 'exmachina_footer_backtotop_shortcode', $output, $atts );

}

add_shortcode( 'footer_copyright', 'exmachina_footer_copyright_shortcode' );
/**
 * Adds the visual copyright notice.
 *
 * Supported shortcode attributes are:
 *   after (output after notice, default is empty string),
 *   before (output before notice, default is empty string),
 *   copyright (copyright notice, default is copyright character like (c) ),
 *   first(year copyright first applies, default is empty string).
 *
 * If the 'first' attribute is not empty, and not equal to the current year, then
 * output will be formatted as first-current year (e.g. 1998-2020).
 * Otherwise, output is just given as the current year.
 *
 * Output passes through 'exmachina_footer_copyright_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_footer_copyright_shortcode( $atts ) {

  $defaults = array(
    'after'     => '',
    'before'    => '',
    'copyright' => '&#x000A9;',
    'first'     => '',
  );
  $atts = shortcode_atts( $defaults, $atts, 'footer_copyright' );

  $output = $atts['before'] . $atts['copyright'] . ' ';

  if ( '' != $atts['first'] && date( 'Y' ) != $atts['first'] )
    $output .= $atts['first'] . '&#x02013;';

  $output .= date( 'Y' ) . $atts['after'];

  return apply_filters( 'exmachina_footer_copyright_shortcode', $output, $atts );

}

add_shortcode( 'footer_childtheme_link', 'exmachina_footer_childtheme_link_shortcode' );
/**
 * Adds the link to the child theme, if the details are defined.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is a string with a middot character).
 *
 * Output passes through 'exmachina_footer_childtheme_link_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string|null Returns early on failure, otherwise returns shortcode output
 */
function exmachina_footer_childtheme_link_shortcode( $atts ) {

  if ( ! is_child_theme() || ! defined( 'CHILD_THEME_NAME' ) || ! defined( 'CHILD_THEME_URL' ) )
    return;

  $defaults = array(
    'after'  => '',
    'before' => '&#x000B7;',
  );
  $atts = shortcode_atts( $defaults, $atts, 'footer_childtheme_link' );

  $output = sprintf( '%s<a href="%s" title="%s">%s</a>%s', $atts['before'], esc_url( CHILD_THEME_URL ), esc_attr( CHILD_THEME_NAME ), esc_html( CHILD_THEME_NAME ), $atts['after'] );

  return apply_filters( 'exmachina_footer_childtheme_link_shortcode', $output, $atts );

}

add_shortcode( 'footer_exmachina_link', 'exmachina_footer_exmachina_link_shortcode' );
/**
 * Adds link to the ExMachina page on the Machina Themes website.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string).
 *
 * Output passes through 'exmachina_footer_exmachina_link_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_footer_exmachina_link_shortcode( $atts ) {

  $defaults = array(
    'after'  => '',
    'before' => '',
    'url'    => 'http://machinathemes.com/themes/exmachina',
  );
  $atts = shortcode_atts( $defaults, $atts, 'footer_exmachina_link' );

  $output = $atts['before'] . '<a href="' . esc_url( $atts['url'] ) . '" title="ExMachina Framework">ExMachina Framework</a>' . $atts['after'];

  return apply_filters( 'exmachina_footer_exmachina_link_shortcode', $output, $atts );

}

add_shortcode( 'footer_machinathemes_link', 'exmachina_footer_machinathemes_link_shortcode' );
/**
 * Adds link to the Machina Themes home page.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is 'by ').
 *
 * Output passes through 'exmachina_footer_machinathemes_link_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_footer_machinathemes_link_shortcode( $atts ) {

  $defaults = array(
    'after'  => '',
    'before' => __( 'by', 'exmachina' ),
  );
  $atts = shortcode_atts( $defaults, $atts, 'footer_machinathemes_link' );

  $output = $atts['before'] . ' <a href="http://www.machinathemes.com/">Machina Themes</a>' . $atts['after'];

  return apply_filters( 'exmachina_footer_machinathemes_link_shortcode', $output, $atts );

}

add_shortcode( 'footer_wordpress_link', 'exmachina_footer_wordpress_link_shortcode' );
/**
 * Adds link to WordPress - http://wordpress.org/ .
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string).
 *
 * Output passes through 'exmachina_footer_wordpress_link_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_footer_wordpress_link_shortcode( $atts ) {

  $defaults = array(
    'after'  => '',
    'before' => '',
  );
  $atts = shortcode_atts( $defaults, $atts, 'footer_wordpress_link' );

  $output = sprintf( '%s<a href="%s" title="%s">%s</a>%s', $atts['before'], 'http://wordpress.org/', 'WordPress', 'WordPress', $atts['after'] );

  return apply_filters( 'exmachina_footer_wordpress_link_shortcode', $output, $atts );

}

add_shortcode( 'footer_loginout', 'exmachina_footer_loginout_shortcode' );
/**
 * Adds admin login / logout link.
 *
 * Support shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string),
 *   redirect (path to redirect to on login, default is empty string).
 *
 * Output passes through 'exmachina_footer_loginout_shortcode' filter before returning.
 *
 * @since 0.5.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function exmachina_footer_loginout_shortcode( $atts ) {

  $defaults = array(
    'after'    => '',
    'before'   => '',
    'redirect' => '',
  );
  $atts = shortcode_atts( $defaults, $atts, 'footer_loginout' );

  if ( ! is_user_logged_in() )
    $link = '<a href="' . esc_url( wp_login_url( $atts['redirect'] ) ) . '">' . __( 'Log in', 'exmachina' ) . '</a>';
  else
    $link = '<a href="' . esc_url( wp_logout_url( $atts['redirect'] ) ) . '">' . __( 'Log out', 'exmachina' ) . '</a>';

  $output = $atts['before'] . apply_filters( 'loginout', $link ) . $atts['after'];

  return apply_filters( 'exmachina_footer_loginout_shortcode', $output, $atts );

}